plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'signing'
}

group = 'io.github.arielcarrera.build.features'
version = '0.2.0'
description = 'A plugin that helps you to build and run applications composed by a set of build features.'
sourceCompatibility = '17'

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

ext {
    set('isReleaseVersion', !version.endsWith("SNAPSHOT"))
    set('springBootVersion', '3.2.1')
    set('springDependencyManagementVersion', '1.1.4')
    set('jacocoLogVersion', '3.1.0')
    set('junitVersion', '5.10.1')
}

dependencies {
    compileOnly gradleApi()
    //Dependency management
    implementation "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    implementation "io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion"
    //Jacoco console log
    implementation "org.barfuin.gradle.jacocolog:org.barfuin.gradle.jacocolog.gradle.plugin:$jacocoLogVersion"
    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
}

gradlePlugin {
    website = 'https://github.com/arielcarrera/build-features-plugin'
    vcsUrl = 'https://github.com/arielcarrera/build-features-plugin.git'
    plugins {
        springBootBuildFeaturesPlugin {
            id = 'io.github.arielcarrera.build.features.boot'
            implementationClass = 'io.github.arielcarrera.build.features.boot.SpringBootBuildFeaturesPlugin'
            displayName = 'SpringBoot Build Features Plugin'
            description = 'A plugin that helps to build and run springboot applications composed by a set of build features'
            tags.addAll('build', 'spring-boot', 'spring-cloud', 'docker', 'feature', 'capability')
        }
        libraryBuildFeaturesPlugin {
            id = 'io.github.arielcarrera.build.features.library'
            implementationClass = 'io.github.arielcarrera.build.features.library.LibraryBuildFeaturesPlugin'
            displayName = 'Library Build Features Plugin'
            description = 'A plugin that helps to build java libraries composed by a set of build features'
            tags.addAll('build', 'library', 'feature', 'capability')
        }
    }
}

publishing {
    publications {
        pluginMaven(org.gradle.api.publish.maven.MavenPublication) {
            artifactId = "build-features-plugin"
            pom {
                name.set("Build Features Plugin")
                description.set("Build Features Plugin: Gradle plugin for managing dependencies as a platform.")
                url.set("https://github.com/arielcarrera/build-features-plugin")
                inceptionYear.set("2023")
                developers {
                    developer {
                        name.set("Ariel Carrera")
                        email.set("carreraariel@gmail.com")
                    }
                }
                licenses {
                    license {
                        name.set("Apache License v2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0")
                    }
                }
                scm {
                    url.set("https://github.com/arielcarrera/build-features-plugin")
                    connection.set("scm:git:git@github.com:arielcarrera/build-features-plugin.git")
                    developerConnection.set("scm:git:ssh:git@github.com:arielcarrera/build-features-plugin.git")
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = System.env.MAVEN_OSS_RELEASES_REPO_URL ?: (System.getenv("NEXUS_URL") + 'maven-releases/')
            def snapshotsRepoUrl = System.env.MAVEN_OSS_SNAPSHOTS_REPO_URL ?: (System.getenv("NEXUS_URL") + 'maven-snapshots/')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv("NEXUS_USER")
                password System.getenv("NEXUS_PASS")
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    sign configurations.archives
}

test {
    useJUnitPlatform()
}

tasks.named("publishPluginMavenPublicationToMavenLocal") {
    dependsOn 'signArchives'
}